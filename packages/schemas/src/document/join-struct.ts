// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FilterClauseStruct } from '../document/filter-clause-struct.js';
import { JoinTypeEnum } from '../enum/join-type-enum.js';


/**
 * Join structure.
 */
export class JoinStruct {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):JoinStruct {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsJoinStruct(bb:flatbuffers.ByteBuffer, obj?:JoinStruct):JoinStruct {
  return (obj || new JoinStruct()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsJoinStruct(bb:flatbuffers.ByteBuffer, obj?:JoinStruct):JoinStruct {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new JoinStruct()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():JoinTypeEnum {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : JoinTypeEnum.Cross;
}

left():string|null
left(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
left(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

right():string|null
right(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
right(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

clause(obj?:FilterClauseStruct):FilterClauseStruct|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new FilterClauseStruct()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startJoinStruct(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addType(builder:flatbuffers.Builder, type:JoinTypeEnum) {
  builder.addFieldInt8(0, type, JoinTypeEnum.Cross);
}

static addLeft(builder:flatbuffers.Builder, leftOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, leftOffset, 0);
}

static addRight(builder:flatbuffers.Builder, rightOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, rightOffset, 0);
}

static addClause(builder:flatbuffers.Builder, clauseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, clauseOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, descriptionOffset, 0);
}

static endJoinStruct(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
