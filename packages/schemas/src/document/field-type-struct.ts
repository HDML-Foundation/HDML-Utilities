// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DataTypeOptionsStruct, unionToDataTypeOptionsStruct, unionListToDataTypeOptionsStruct } from '../document/data-type-options-struct.js';
import { DataTypeEnum } from '../enum/data-type-enum.js';


/**
 * Field type structure.
 */
export class FieldTypeStruct {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FieldTypeStruct {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFieldTypeStruct(bb:flatbuffers.ByteBuffer, obj?:FieldTypeStruct):FieldTypeStruct {
  return (obj || new FieldTypeStruct()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFieldTypeStruct(bb:flatbuffers.ByteBuffer, obj?:FieldTypeStruct):FieldTypeStruct {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FieldTypeStruct()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():DataTypeEnum {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : DataTypeEnum.Unspecified;
}

optionsType():DataTypeOptionsStruct {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : DataTypeOptionsStruct.NONE;
}

options<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startFieldTypeStruct(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addType(builder:flatbuffers.Builder, type:DataTypeEnum) {
  builder.addFieldInt8(0, type, DataTypeEnum.Unspecified);
}

static addOptionsType(builder:flatbuffers.Builder, optionsType:DataTypeOptionsStruct) {
  builder.addFieldInt8(1, optionsType, DataTypeOptionsStruct.NONE);
}

static addOptions(builder:flatbuffers.Builder, optionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, optionsOffset, 0);
}

static endFieldTypeStruct(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFieldTypeStruct(builder:flatbuffers.Builder, type:DataTypeEnum, optionsType:DataTypeOptionsStruct, optionsOffset:flatbuffers.Offset):flatbuffers.Offset {
  FieldTypeStruct.startFieldTypeStruct(builder);
  FieldTypeStruct.addType(builder, type);
  FieldTypeStruct.addOptionsType(builder, optionsType);
  FieldTypeStruct.addOptions(builder, optionsOffset);
  return FieldTypeStruct.endFieldTypeStruct(builder);
}
}
