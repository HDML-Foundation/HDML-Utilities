// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { TimeUnitEnum } from '../enum/time-unit-enum.js';
import { TimeZoneEnum } from '../enum/time-zone-enum.js';


/**
 * Timestamp data type parameters structure.
 */
export class TimestampParametersStruct {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TimestampParametersStruct {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTimestampParametersStruct(bb:flatbuffers.ByteBuffer, obj?:TimestampParametersStruct):TimestampParametersStruct {
  return (obj || new TimestampParametersStruct()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTimestampParametersStruct(bb:flatbuffers.ByteBuffer, obj?:TimestampParametersStruct):TimestampParametersStruct {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TimestampParametersStruct()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

nullable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

unit():TimeUnitEnum {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TimeUnitEnum.Second;
}

timezone():TimeZoneEnum {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : TimeZoneEnum.UTC;
}

static startTimestampParametersStruct(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addNullable(builder:flatbuffers.Builder, nullable:boolean) {
  builder.addFieldInt8(0, +nullable, +false);
}

static addUnit(builder:flatbuffers.Builder, unit:TimeUnitEnum) {
  builder.addFieldInt8(1, unit, TimeUnitEnum.Second);
}

static addTimezone(builder:flatbuffers.Builder, timezone:TimeZoneEnum) {
  builder.addFieldInt16(2, timezone, TimeZoneEnum.UTC);
}

static endTimestampParametersStruct(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTimestampParametersStruct(builder:flatbuffers.Builder, nullable:boolean, unit:TimeUnitEnum, timezone:TimeZoneEnum):flatbuffers.Offset {
  TimestampParametersStruct.startTimestampParametersStruct(builder);
  TimestampParametersStruct.addNullable(builder, nullable);
  TimestampParametersStruct.addUnit(builder, unit);
  TimestampParametersStruct.addTimezone(builder, timezone);
  return TimestampParametersStruct.endTimestampParametersStruct(builder);
}
}
