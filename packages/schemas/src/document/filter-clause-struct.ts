// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FilterStruct } from '../document/filter-struct.js';
import { FilterOperatorEnum } from '../enum/filter-operator-enum.js';


/**
 * Filter clause structure.
 */
export class FilterClauseStruct {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FilterClauseStruct {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFilterClauseStruct(bb:flatbuffers.ByteBuffer, obj?:FilterClauseStruct):FilterClauseStruct {
  return (obj || new FilterClauseStruct()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFilterClauseStruct(bb:flatbuffers.ByteBuffer, obj?:FilterClauseStruct):FilterClauseStruct {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FilterClauseStruct()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():FilterOperatorEnum {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : FilterOperatorEnum.Or;
}

filters(index: number, obj?:FilterStruct):FilterStruct|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FilterStruct()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

filtersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

children(index: number, obj?:FilterClauseStruct):FilterClauseStruct|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new FilterClauseStruct()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

childrenLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFilterClauseStruct(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addType(builder:flatbuffers.Builder, type:FilterOperatorEnum) {
  builder.addFieldInt8(0, type, FilterOperatorEnum.Or);
}

static addFilters(builder:flatbuffers.Builder, filtersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, filtersOffset, 0);
}

static createFiltersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFiltersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addChildren(builder:flatbuffers.Builder, childrenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, childrenOffset, 0);
}

static createChildrenVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startChildrenVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endFilterClauseStruct(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFilterClauseStruct(builder:flatbuffers.Builder, type:FilterOperatorEnum, filtersOffset:flatbuffers.Offset, childrenOffset:flatbuffers.Offset):flatbuffers.Offset {
  FilterClauseStruct.startFilterClauseStruct(builder);
  FilterClauseStruct.addType(builder, type);
  FilterClauseStruct.addFilters(builder, filtersOffset);
  FilterClauseStruct.addChildren(builder, childrenOffset);
  return FilterClauseStruct.endFilterClauseStruct(builder);
}
}
